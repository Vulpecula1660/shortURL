// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/redis/querier.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	db "shortURL/db/sqlc"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisQuerier is a mock of RedisQuerier interface.
type MockRedisQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockRedisQuerierMockRecorder
}

// MockRedisQuerierMockRecorder is the mock recorder for MockRedisQuerier.
type MockRedisQuerierMockRecorder struct {
	mock *MockRedisQuerier
}

// NewMockRedisQuerier creates a new mock instance.
func NewMockRedisQuerier(ctrl *gomock.Controller) *MockRedisQuerier {
	mock := &MockRedisQuerier{ctrl: ctrl}
	mock.recorder = &MockRedisQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisQuerier) EXPECT() *MockRedisQuerierMockRecorder {
	return m.recorder
}

// ExistBloom mocks base method.
func (m *MockRedisQuerier) ExistBloom(ctx context.Context, shortUrl string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistBloom", ctx, shortUrl)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistBloom indicates an expected call of ExistBloom.
func (mr *MockRedisQuerierMockRecorder) ExistBloom(ctx, shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistBloom", reflect.TypeOf((*MockRedisQuerier)(nil).ExistBloom), ctx, shortUrl)
}

// GetData mocks base method.
func (m *MockRedisQuerier) GetData(ctx context.Context, shortUrl string) (db.Url, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, shortUrl)
	ret0, _ := ret[0].(db.Url)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetData indicates an expected call of GetData.
func (mr *MockRedisQuerierMockRecorder) GetData(ctx, shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockRedisQuerier)(nil).GetData), ctx, shortUrl)
}

// SetBloom mocks base method.
func (m *MockRedisQuerier) SetBloom(ctx context.Context, shortUrl string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBloom", ctx, shortUrl)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBloom indicates an expected call of SetBloom.
func (mr *MockRedisQuerierMockRecorder) SetBloom(ctx, shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBloom", reflect.TypeOf((*MockRedisQuerier)(nil).SetBloom), ctx, shortUrl)
}

// SetData mocks base method.
func (m *MockRedisQuerier) SetData(ctx context.Context, shortUrl string, url db.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetData", ctx, shortUrl, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetData indicates an expected call of SetData.
func (mr *MockRedisQuerierMockRecorder) SetData(ctx, shortUrl, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockRedisQuerier)(nil).SetData), ctx, shortUrl, url)
}
