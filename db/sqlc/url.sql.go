// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: url.sql

package db

import (
	"context"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (
  origin_url,
  short_url
) VALUES (
  $1, $2
) RETURNING id, origin_url, short_url, created_at
`

type CreateURLParams struct {
	OriginUrl string `json:"origin_url"`
	ShortUrl  string `json:"short_url"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL, arg.OriginUrl, arg.ShortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls
WHERE id = $1
`

func (q *Queries) DeleteURL(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteURL, id)
	return err
}

const getURL = `-- name: GetURL :one
SELECT id, origin_url, short_url, created_at FROM urls
WHERE short_url = $1 LIMIT 1
`

func (q *Queries) GetURL(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURL, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateURL = `-- name: UpdateURL :one
UPDATE urls
SET short_url = $2
WHERE id = $1
RETURNING id, origin_url, short_url, created_at
`

type UpdateURLParams struct {
	ID       int64  `json:"id"`
	ShortUrl string `json:"short_url"`
}

func (q *Queries) UpdateURL(ctx context.Context, arg UpdateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, updateURL, arg.ID, arg.ShortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}
